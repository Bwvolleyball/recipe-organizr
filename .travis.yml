sudo: false
services:
- docker
env:
  global:
    secure: Gq/J5Z3f9+BNvFlh02oyvdaNxHm94Jzfu6GTqftxOVF2PFQkGHvg0AQ7wHLJNG0CFKvfCPWOnPCyUxUVnxVi5fs+NBTLDbliGFv30Lwmw9zzHRL+yQ44gpKD4WHbt+zFKvHdbLesNSzKwFKGz8OX34Hg6xg/uslxWiP0R+6LFuucbeVB0VVWze9izfk9N65++WogludJ2SGLwmnZ1Z0kAZO5nfxMGyIQdLnXEBu3OpGEE4CDNNDFlgecIDqCq7a53qoYnoPK+RurvMB48fox23P3aKn7ixQ29+RtXFAhYm8DBTCE3FjlCnGuPKgnVJo4eVATmbLe8XTim/AlIW63eyGydvCz7LmTgqNwfRV/6Q4rEcNgwYDOCt4PFPRAp6VqXsjkZ+jQhJDmDNKVpn4FakgX5O3kXEjNeicIQpi+18QsMoqCJYSSMwX/0+MdBV1GYKDWDormCBemLltNEZmhYtZorj+S/hWwxpyYEKQuoz+xAKR7JW8WyntH1wkrY/zZIBmSveHqmaKEjVkDQ3xfjpmZTKqPDb12lZRN/wklpNtzOOzU0BT8TsQLlVrqh2fUbgR6LVJ29frWCXnfazagRi6+oLNdpS1q5jB948k9T+nKp79sDZdEmqkimWg3jNWW1ULHIG35W0lra6y75v3pa96APv0XofLDMMiWCOEIF98=
before_install:
- gpg --batch --yes --passphrase $GPG_PASSWORD --output service-account.json --decrypt service-account.json.gpg
before_cache:
- rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
- rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories:
  - "$HOME/.gradle/caches/"
  - "$HOME/.gradle/wrapper/"
  - "$HOME/google-cloud-sdk/"
stages:
- compile
- deploy
jobs:
  include:
  - stage: compile
    language: java
    jdk: openjdk8
    install: true
    before_script:
    - cd gateway
    script:
    - "./gradlew build --scan -s"
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - test $TRAVIS_BRANCH = "master" && test $TRAVIS_PULL_REQUEST = "false" && docker
      build -t bwvolleyball/gateway . && docker push bwvolleyball/gateway
  - stage: compile
    language: java
    jdk: openjdk8
    install: true
    before_script:
    - cd auth-api
    script:
    - "./gradlew build --scan -s"
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - test $TRAVIS_BRANCH = "master" && test $TRAVIS_PULL_REQUEST = "false" && docker
      build -t bwvolleyball/auth-api . && docker push bwvolleyball/auth-api
  - stage: compile
    language: java
    jdk: openjdk8
    install: true
    before_script:
    - cd recipe-api
    script:
    - "./gradlew build --scan -s"
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - test $TRAVIS_BRANCH = "master" && test $TRAVIS_PULL_REQUEST = "false" && docker
      build -t bwvolleyball/recipe-api . && docker push bwvolleyball/recipe-api
  - stage: compile
    language: java
    jdk: openjdk8
    install: true
    before_script:
    - cd cookbook-api
    script:
    - "./gradlew build --scan -s"
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - test $TRAVIS_BRANCH = "master" && test $TRAVIS_PULL_REQUEST = "false" && docker
      build -t bwvolleyball/cookbook-api . && docker push bwvolleyball/cookbook-api
  - stage: compile
    language: java
    jdk: openjdk8
    install: true
    before_script:
    - cd swagger-api
    script:
    - "./gradlew build --scan -s"
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - test $TRAVIS_BRANCH = "master" && test $TRAVIS_PULL_REQUEST = "false" && docker
      build -t bwvolleyball/swagger-api . && docker push bwvolleyball/swagger-api
  - stage: compile
    language: node_js
    node_js: lts/*
    before_script:
    - npm install -g @angular/cli
    - cd recipe-organizr-ui
    script:
    - npm ci
    - ng lint recipe-organizr-ui
    - ng build --prod --aot
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - test $TRAVIS_BRANCH = "master" && test $TRAVIS_PULL_REQUEST = "false" && docker
      build -t bwvolleyball/recipe-organizr-ui . && docker push bwvolleyball/recipe-organizr-ui
  - stage: deploy
    if: branch = master AND type = push
    script:
    - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk;
      export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com |
      bash; fi
    - ls /home/travis/google-cloud-sdk
    - source /home/travis/google-cloud-sdk/path.bash.inc
    - gcloud version
    - gcloud auth activate-service-account $GCLOUD_SVC_ACCOUNT --key-file=./service-account.json
    - gcloud compute scp ./gcp/deploy.sh $GCLOUD_SVC_ACCOUNT_USER@$GCLOUD_INSTANCE:/tmp/deploy.sh
      --zone=us-west1-a --project=$GCLOUD_PROJECT
    - gcloud compute ssh $GCLOUD_SVC_ACCOUNT_USER@$GCLOUD_INSTANCE --command="cd /tmp/;
      sudo chmod 777 deploy.sh; sudo bash deploy.sh;" --zone=us-west1-a --project=$GCLOUD_PROJECT
